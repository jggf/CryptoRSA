package org.example;

import javax.xml.bind.DatatypeConverter;
import java.nio.charset.StandardCharsets;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;

public class Main {

    public static void main(String[] args) {
        try {
            crearLlaves();
            System.out.println("ENC MODULE AND EXPONENT : ");
            try {
                String tkEn = Encrypt.enc("818b97dccbdc6cc9baea9ccde9ed81035264b190d89844ae60dd16fec14451d27b0f3807867d6812bc2ebe1f23b53f54d021d48df8d27be6c932129c3cb9613912235ef3d7f697b2d6e8de5a30e221b1c19d927ea566b9700ba392dbdd4dca1997dd5009d0634ea0813428432bbfbb5c9e025ed8a6083971eadb7ad4a5de2d7d75f0f2199f5f4b63e5e1d5b436fea51ba32791473073b0a1428938a8305fb956e40719ed7d3a8f02e095a51a9bec37aad3655e099e99fc49067ae381e7a02db90424160712bd5d191d8c229cec939aa1878c35fc1a996d47c62791fb83ab7ab6e4fde992669b510d861342b067ddf5801dbb948779c45c3f441e2183334ba005010001".toUpperCase());

                System.out.println("Check Value : " + CheckValue.checkValue(tkEn.getBytes(StandardCharsets.UTF_8)));

                Desincrypt.destkEn);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            System.out.println("\n\r");
            System.out.println("ENC With Public Complete : ");
            try {
                String tkEn2 = Encrypt.encPK("30820122300D06092A864886F70D01010105000382010F003082010A0282010100818B97DCCBDC6CC9BAEA9CCDE9ED81035264B190D89844AE60DD16FEC14451D27B0F3807867D6812BC2EBE1F23B53F54D021D48DF8D27BE6C932129C3CB9613912235EF3D7F697B2D6E8DE5A30E221B1C19D927EA566B9700BA392DBDD4DCA1997DD5009D0634EA0813428432BBFBB5C9E025ED8A6083971EADB7AD4A5DE2D7D75F0F2199F5F4B63E5E1D5B436FEA51BA32791473073B0A1428938A8305FB956E40719ED7D3A8F02E095A51A9BEC37AAD3655E099E99FC49067AE381E7A02DB90424160712BD5D191D8C229CEC939AA1878C35FC1A996D47C62791FB83AB7AB6E4FDE992669B510D861342B067DDF5801DBB948779C45C3F441E2183334BA0050203010001".toUpperCase());
                Desincrypt.des
                        tkEn2);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public static void crearLlaves() {
        try {
            KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
            kpg.initialize(2048);
            KeyPair kp = kpg.genKeyPair();
            RSAPrivateKey privateKey = (RSAPrivateKey) kp.getPrivate();
            RSAPublicKey publicKey = (RSAPublicKey) kp.getPublic();

            byte[] privateKeyBytes = privateKey.getEncoded();

            byte[] publicKeyBytes = publicKey.getEncoded();

            // Convertir a formato hexadecimal

            // Imprimir resultados
            System.out.println("Private Key:");
            System.out.println(DatatypeConverter.printHexBinary(privateKeyBytes));


            System.out.println("Public Key:");
            System.out.println(DatatypeConverter.printHexBinary(publicKeyBytes));
            System.out.println(publicKey.getModulus().toString(16));
            System.out.println(DatatypeConverter.printHexBinary(publicKey.getPublicExponent().toByteArray()));

        } catch (NoSuchAlgorithmException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

}